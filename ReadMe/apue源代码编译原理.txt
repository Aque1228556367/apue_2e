源地址：
http://blog.csdn.net/dycwahaha/article/details/2300938

APUE源代码编译(ZZ+2) ：

转载自:http://blog.chinaunix.net/u1/52350/showart_426726.html


最近学习Linux编程，收获真的很多。以前看都是别人或man告诉你某个命令怎么使用，但现在我才领悟到，是程序的源代码决定了全部。

 

linux要编程，首先需要安装gcc与其它编程工具与库文件。最简单的方法是进入图形界面的添加删除程序，选上开发工具就可以了。

 

 

1.APUE2源代码下载：http://www.apuebook.com/src.tar.gz

2.我保存到了/root下.解压缩:tar -xzvf src.tar.gz

3.cd apue.2e进入apue.2e目录,查看README,告诉我们linux系统只要修改Make.defines.linux再make

4.vi Make.defines.linux 修改WKDIR=/root/apue.2e 就是说工作目录为WKDIR=/root/apue.2e

5.修改/root/apue.2e/std/linux.mk把全部的nawk改为awk.因些linux默认没有nawk

6.make

 

一个需要注意的地方:

apue编程的例子都有关include "apue.h"的代码,其实apue.h并不是系统自带的,它是作者编写的头文件,源代码在附录B中.因此一个方法是.把刚才生成的 /root/apue.2e/include/apue.h直接复制到/usr/include下.
还有像err_sys的函数也在附录B中.同样的方法是在/usr/include新建一个 my_err.h的文件,把Figure B.3. Error functions that output to standard error内容复制进去.这样按例子编程就只需要在行首添加:#include "my_err.h"就可以了..










转载自：http://www.blog.edu.cn/user2/shawnchen/archives/2007/1955932.shtml


                     APUE2作者提供的源码编译方法及单个源码编译的实现（转载）

 前面一篇文章讲解了《UNIX环境高级编程》源码编译方法。文中所讲到的编译方法是非作者提供的编译方法，即不使用作者提供的头文件，程序中所有使用的头文件都一一列出。而程序中的出错处理函数则简单的用printf函数替代。 
    随后，也有网友提出如何采用作者的方法来对所有的程序进行编译。出于解决问题，同时也想实现这个方法，毕竟实现之后每个程序都可以直接运行，还是比较方便的。因此，就按照源代码文件夹中的README的步骤，对整个源代码进行了编译。

（一）作者提供的编译方法的实现

     README文件中给出的编译方法如下：

    To build the source, edit the Make.defines.* file for your system and set WKDIR to the pathname of the tree containing the source code.  Then just run "make".  It should figure out the system type and build the source for that platform utomatically. 

     参照该方法，我将源码的编译分为三步。整个步骤都是在root超级用户下进行的，如果其他用户没有权限进行编译，可以通过su命令切换到超级用户。 

      第一步，编辑Make.defines.*文件。由于我所使用的操作系统是FreeBSD6.1，所以应该编辑文件Make.defines.freebsd。其实，编辑该文件的内容主要是修改其中的WKDIR，即我们源码所在文件夹的绝对路径名。原文件中WKDIR＝/home/sar/apue.2e，我们可以根据我们实际文件夹所在的位置进行相应的修改。我的apue.2e文件夹直接放在/home下了，所以我将WKDIR修改为WKDIR＝/home/apue.2e。其余内容不用修改，保存修改后的文件。

      第二步，修改脚本文件systype.sh的权限。由于原始的systype.sh文件不具有可执行的权限。通过执行命令:

#chmod +x systype.sh   

给当前用户及其所在组和其他组添加可执行权限；

或者

#chmod u+x systype.sh  

仅给当前用户添加可执行权限。 

       该脚本文件的功能主要是检测操作系统的类型。它可以检测到系统的类型有：FreeBSD，Linux，MacOS和Solaris等。如果单独执行这个shell脚本：

＃./systype.sh

则输出结果为：freebsd。即检测本机的操作系统为FreeBSD。

    第三步，进行源码的编译。在命令行下执行make命令。通过查看Makefile文件可知，make之后，首先执行systype.sh脚本，即首先确定操作系统的类型，然后在进行源码的编译。在编译的过程中，会有一些Warning。这些都是正常的，导致警告的原因可能是采用编译起的版本不同或者是同一类型操作系统的版本不同。但是，只要make的过程不出现error，就会顺利的生成可执行文件。我的在编译过程中没有出现error，因此意味着编译成功。

       注意：编译的过程中可能会出现的一个问题，也是一个网友曾经问到的问题，就是在编译中出现这个的错误，提示nawk command cannot be found。这个问题可能的原因是，有些操作系统的内核版本较低，可能还不支持nawk(new awk)这个命令。但应该支持awk命令。因此，问题的解决方法就是将相关文件中的nawk命令替换为awk，或者为系统添加一个别名alias，alias nawk awk。这样在编一的过程中，遇到nawk命令时，实际会去执行awk命令。如果还有其他问题，可以去网上搜索相关的解决方法。因为我在编译的过程中没有遇到这样的问题，不再一一赘述。

（二）编译生成可执行文件的位置

     在路径/home/apue.2e/下虽然有所有的源文件，都是以figx.x的形式命名。但是实际编译的过程并不是编译的这些文件。而是编译在该路径下各个文件夹中的后缀名为＊.c的程序。作者把同一章节或者相近几个章节的源代码放在某一个文件夹下面（include和lib文件夹除外）。而文件夹的命名一般是和该章对应的标题是一致的，采用的是英文标题的全称或简写。譬如，advio文件夹对应Chapter 14. Advanced I/O，该章的代码就放在该文件夹下面。还有文件夹proc对应Chapter 8. Process Control，文件夹termios对应Chapter 18. Terminal I/O等等，基本上每一章的代码都可以在这些文件夹中找到。

（三）如何编译单独的源文件

     通过make命令是直接将所有的源程序编译成可执行文件的。对于喜欢修改和调试程序的朋友来说，make生成的可执行文件显然不具有这样的功能，而且，也不可能修改了一个源文件，然后还要make。如何需要编译和调试单个程序的话，方法如下：

1.首先还是要用make对所有文件进行编译。成功编译后，会在WKDIR／lib／下生成库文件libapue.a，主要是将apue.h（位于WKDIR／include/）中定义的所有内容生成一个静态的库，这样可以方便调用。

2.我们以WKDIR/下的fig1.3（实现ls部分功能）文件为例说明需要修改的地方。将fig1.3文件重命名为fig1.3.c，然后编辑该文件，将包含头文件的一行代码：

＃i nclude "apue.h"  //默认所引用头文件的位置为当前的路径WKDIR=/home/apue.2e

修改为

＃i nclude "include/apue.h" 

即头文件apue.h的位置为当前路径下inlucde文件夹中，这个就正确的指定了apue.h的位置。

这样就可以进行编译了，但在编译的时候还要加上库文件libapue.a，因为该文件实现了apue.h中的所有功能，主要有常用头文件，宏定义以及自定义函数的实现。

输入命令

#gcc fig1.3.c lib/libapue.a   

则会生成可执行文件a.out。执行命令

#./a.out /home

则列出我的/home路径下的所有文件和文件夹：

.

..

david

simsun .ttc

simkai.ttf

simsun.ttf

MYKERNEL

unix_advance_program

freebsd

APUE Source Code

LumaQQ

apue.2e

bash-script

lumaqq_2005_patch_2006.01.22.15.00.zip

lumaqq_2005-linux_gtk2_x86_with_jre.tar

apue_src_complied.tar

 

   当然，如果需要编译的是各个文件夹中的一个源程序时，则只需对所包含的头文件apue.h的路径作相对修改，改为

＃i nclude "../include/apue.h"

以及编译是库文件的位置也相应修改，改为：

#gcc sourcefile.c ../lib/libapue.a

    至此，APUE第二版作者提供的源码编译方法和单独源码的编译都已经实现。
