Windows 下的网络 I/O 模型：
参照：
http://www.cnblogs.com/lzjsky/archive/2011/04/08/2009367.html（最形象）
http://blog.sina.com.cn/s/blog_a8b2435901014giu.html（有代码）


(1)选择模型（select）
总结：周而复始的检查是否有发过来的数据

(2)异步选择模型（WSAAsyncSelect）
总结：如果有发过来的数据，Windows会把网络事件以消息的形势通知应用程序
不影响接收别的数据

(3)事件选择模型（WSAEventSelect）


(4)重叠 I/O 模型（Overlapped I/O）
此模型又分两种：事件通知模型，和完成例程模型

(5)完成端口模型（Completion Port，IOCP）


Unix 下的网络 I/O 模型：
参照：http://www.cnblogs.com/jankie/archive/2011/05/19/2050919.html

(1)阻塞 I/O 模型：
最流行的I/O模型是阻塞I/O模型，缺省时，所有sockt都是阻塞的,这意味着当一个sockt调用不能立即完成时，进程进入睡眠状态，等待操作完成

(2)非阻塞 I/O 模型：
当我们把一个sockt设置成非阻塞放式时，即通知内核：当请求的I/O操作非得让进程睡眠才能完成时，不要让进程睡眠，而应该返回一个错误。

(3) I/O 复用模型（select/epoll）：
 I/O复用能让一个或多个I/O条件满足（例如，输入已经准备好被读，或者描述字可以承接更多的输出）时，我们就被通知到。I/O复用由select和poll支持，较新的Posix.1g也支持(pselect)。

(4)信号驱动 I/O 模型（SIGIO）：
信号驱动 I/O模型能在描述字准备好时用信号SIGIO通知我们

(5)异步I/O 模型（POSIX.1的aio_系列函数）：
异步I/O模型是Posix.1的1993版本中的新内容。我们让内核启动操作，并在整个操作完成后（包括将数据报从内核拷贝到我们自己的缓冲区）通知我们。这种模型与信号驱动模型的主要区别在于：信号驱动I/O是有内核通知我们何时可以启动一个I/O操作，而异步I/O模型是由内核通知我们I/O操作何时完成